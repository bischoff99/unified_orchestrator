{
  "response": "```python\nfrom fastapi import FastAPI, Request, Response\nfrom pydantic import BaseModel\nimport sqlite3\n\napp = FastAPI()\n\nclass Note(BaseModel):\n    id: int\n    title: str\n    content: str\n    created_at: datetime.datetime\n    updated_at: datetime.datetime\n\n@app.post(\"/notes\")\nasync def create_note(request: Request, response: Response):\n    note = Note(**request.json())\n    with sqlite3.connect(\"notes.db\") as conn:\n        cursor = conn.cursor()\n        cursor.execute(\"INSERT INTO notes (title, content) VALUES (?, ?)\", (note.title, note.content))\n        conn.commit()\n        response.status_code = 201\n        return {\"id\": cursor.lastrowid}\n\n@app.get(\"/notes\")\nasync def get_notes(request: Request, response: Response):\n    with sqlite3.connect(\"notes.db\") as conn:\n        cursor = conn.cursor()\n        notes = []\n        for row in cursor.execute(\"SELECT * FROM notes\"):\n            notes.append({\"id\": row[0], \"title\": row[1], \"content\": row[2]})\n    response.status_code = 200\n    return {\"notes\": notes}\n```\nThis code creates a FastAPI app with two endpoints: `/notes` for creating and retrieving notes. The `create_note` endpoint takes a JSON object with the title and content of the note, inserts it into the SQLite database, and returns the ID of the newly created note. The `get_notes` endpoint retrieves all the notes from the database and returns them as a JSON array.\n\nNote that this code assumes that you have already created a SQLite database called \"notes.db\" with a table called \"notes\" that has the same schema as defined in the previous section.",
  "cached_at": "2025-10-22T10:47:32.151248",
  "cache_key": "28a41ca0690ea2a1b164020c8517c5a03ae636f28655769d175bf56dc3faf9fb"
}