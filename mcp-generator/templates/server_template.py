#!/usr/bin/env python3
"""
{API_NAME} MCP Server Template
Generated by MCP Generator

This is a template that agents can reference when generating MCP servers.
"""

import asyncio
import json
import logging
import os
from datetime import datetime
from typing import Any, Dict, List, Optional
from dataclasses import dataclass

import aiohttp

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("{api_name}-mcp")


@dataclass
class {API_CLASS}Config:
    """API configuration"""
    access_token: str
    api_base: str = "{API_BASE_URL}"
    timeout: int = 30


class {API_CLASS}Client:
    """API client for {API_NAME}"""
    
    def __init__(self, access_token: str):
        self.access_token = access_token
        self.base_url = "{API_BASE_URL}"
        self.session = None
    
    async def __aenter__(self):
        """Async context manager entry"""
        self.session = aiohttp.ClientSession(
            headers={
                'Authorization': f'Bearer {self.access_token}',
                'Content-Type': 'application/json'
            },
            timeout=aiohttp.ClientTimeout(total=30)
        )
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """Async context manager exit"""
        if self.session:
            await self.session.close()
    
    async def _make_request(self, method: str, endpoint: str, data: Optional[Dict] = None) -> Dict[str, Any]:
        """Make HTTP request"""
        url = f"{self.base_url}/{endpoint.lstrip('/')}"
        
        try:
            async with self.session.request(method, url, json=data) as response:
                response.raise_for_status()
                return await response.json()
        except aiohttp.ClientError as e:
            logger.error(f"API request failed: {e}")
            raise


class {API_CLASS}MCPServer:
    """MCP Server for {API_NAME}"""
    
    def __init__(self):
        self.access_token = os.getenv('{API_ENV_VAR}', 'demo_token')
        logger.info(f"Initialized {API_NAME} MCP Server")
    
    def get_tools_schema(self) -> List[Dict[str, Any]]:
        """Get schema for all available tools"""
        return [
            {
                "name": "example_tool",
                "description": "Example tool description",
                "input_schema": {
                    "type": "object",
                    "properties": {
                        "param": {"type": "string", "description": "Parameter description"}
                    },
                    "required": ["param"]
                }
            }
            # Add more tools here
        ]
    
    async def call_tool(self, name: str, arguments: dict) -> Dict[str, Any]:
        """Execute a tool call"""
        try:
            async with {API_CLASS}Client(self.access_token) as client:
                
                if name == "example_tool":
                    # Implement tool logic
                    result = {"success": True, "data": "example"}
                    return {"success": True, "data": result}
                
                else:
                    return {"success": False, "error": f"Unknown tool: {name}"}
                    
        except Exception as e:
            logger.error(f"Tool execution error: {e}")
            return {"success": False, "error": str(e)}


async def main():
    """Main entry point"""
    if len(sys.argv) > 1 and sys.argv[1] == "demo":
        print(f"ðŸš€ {API_NAME} MCP Server - Demo Mode")
        server = {API_CLASS}MCPServer()
        
        # Demo tool call
        result = await server.call_tool("example_tool", {"param": "test"})
        print(f"Result: {json.dumps(result, indent=2)}")
    else:
        print(f"Usage: python server.py demo")


if __name__ == "__main__":
    import sys
    asyncio.run(main())
