name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.11', '3.12']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Lint with ruff
      run: |
        pip install ruff
        ruff check src/ tests/ --select E,F,I,N,W
      continue-on-error: true
    
    - name: Run tests
      run: |
        pytest -q --tb=short
    
    - name: Run tests with coverage
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      run: |
        pip install pytest-cov
        pytest --cov=src --cov-report=term-missing --cov-report=xml
    
    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  smoke-test:
    name: Smoke Test - Run Tiny Spec
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e .
    
    - name: Install Ollama (for smoke test)
      run: |
        curl -fsSL https://ollama.ai/install.sh | sh
        ollama serve &
        sleep 5
        ollama pull codellama:7b-instruct
    
    - name: Run orchestrator with tiny spec
      run: |
        orchestrator run examples/tiny_spec.yaml || echo "Orchestrator run completed"
      timeout-minutes: 10
      continue-on-error: true
    
    - name: Check generated output exists
      run: |
        ls -la runs/
        test -d runs/ || exit 1
        echo "✅ Run directory created"
    
    - name: Validate manifest and events
      run: |
        python -c "
        from pathlib import Path
        import json
        
        # Find latest run
        runs = sorted(Path('runs').iterdir(), key=lambda p: p.stat().st_mtime, reverse=True)
        if not runs:
            print('No runs found')
            exit(1)
        
        run_dir = runs[0]
        print(f'Checking run: {run_dir.name}')
        
        # Check manifest exists
        manifest_path = run_dir / 'manifest.json'
        assert manifest_path.exists(), 'manifest.json missing'
        
        with open(manifest_path) as f:
            manifest = json.load(f)
        
        assert 'job_id' in manifest
        assert 'status' in manifest
        assert 'files' in manifest
        
        # Check events exist
        events_path = run_dir / 'events.jsonl'
        assert events_path.exists(), 'events.jsonl missing'
        
        with open(events_path) as f:
            events = [json.loads(line) for line in f if line.strip()]
        
        assert len(events) > 0, 'No events recorded'
        assert any(e.get('type') == 'job.started' for e in events)
        
        print(f'✅ Manifest and events validated')
        print(f'   Status: {manifest[\"status\"]}')
        print(f'   Events: {len(events)}')
        print(f'   Files: {len(manifest[\"files\"])}')
        "

  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
    
    - name: Install linters
      run: |
        pip install black ruff
    
    - name: Check formatting with black
      run: |
        black --check src/ tests/
      continue-on-error: true
    
    - name: Lint with ruff
      run: |
        ruff check src/ tests/
      continue-on-error: true
