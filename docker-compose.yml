version: '3.8'

services:
  # Main Orchestrator Service
  orchestrator:
    build:
      context: .
      dockerfile: src/docker/Dockerfile
    container_name: unified_orchestrator
    ports:
      - "8000:8000"  # API port (if REST API is added)
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
      - ./src/generated:/app/src/generated
      - ./.faiss:/app/.faiss
      - ./memory:/app/memory
    environment:
      - MODEL_BACKEND=${MODEL_BACKEND:-ollama}
      - MODEL_NAME=${MODEL_NAME:-llama3.1:8b-instruct-q5_K_M}
      - OLLAMA_BASE_URL=http://ollama:11434
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8001
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PARALLEL_MODE=${PARALLEL_MODE:-true}
      - MAX_CONCURRENT_TASKS=${MAX_CONCURRENT_TASKS:-8}
    env_file:
      - .env
    depends_on:
      - chromadb
      - ollama
    networks:
      - orchestrator_network
    restart: unless-stopped
    command: ["python", "main.py", "${TASK:-Build a FastAPI service}"]

  # ChromaDB Vector Store
  chromadb:
    image: chromadb/chroma:latest
    container_name: chromadb
    ports:
      - "8001:8000"
    volumes:
      - chromadb_data:/chroma/chroma
    environment:
      - IS_PERSISTENT=TRUE
      - ANONYMIZED_TELEMETRY=${CHROMA_TELEMETRY:-FALSE}
    networks:
      - orchestrator_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ollama LLM Service
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_models:/root/.ollama
    environment:
      - OLLAMA_NUM_PARALLEL=${OLLAMA_NUM_PARALLEL:-4}
      - OLLAMA_MAX_LOADED_MODELS=${OLLAMA_MAX_LOADED_MODELS:-2}
    networks:
      - orchestrator_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 60s
      timeout: 10s
      retries: 3
    # For GPU support on Linux, uncomment:
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: all
    #           capabilities: [gpu]

  # Redis Cache (Optional - Tier 3)
  redis:
    image: redis:7-alpine
    container_name: redis_cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - orchestrator_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - tier3  # Only start with --profile tier3

  # MLflow Tracking Server
  mlflow:
    image: ghcr.io/mlflow/mlflow:latest
    container_name: mlflow_server
    ports:
      - "5000:5000"
    volumes:
      - mlflow_data:/mlflow
      - ./logs:/app/logs
    command: >
      mlflow server
      --backend-store-uri sqlite:///mlflow/mlflow.db
      --default-artifact-root /mlflow/artifacts
      --host 0.0.0.0
      --port 5000
    networks:
      - orchestrator_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Prometheus Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - orchestrator_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    networks:
      - orchestrator_network
    restart: unless-stopped
    depends_on:
      - prometheus
    profiles:
      - monitoring

  # Node Exporter (System Metrics)
  node-exporter:
    image: prom/node-exporter:latest
    container_name: node_exporter
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - orchestrator_network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  chromadb_data:
    driver: local
  ollama_models:
    driver: local
  redis_data:
    driver: local
  mlflow_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
networks:
  orchestrator_network:
    driver: bridge
