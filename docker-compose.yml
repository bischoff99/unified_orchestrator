version: '3.8'

services:
  # Main Orchestrator Service
  orchestrator:
    build:
      context: .
      dockerfile: src/docker/Dockerfile
    container_name: unified_orchestrator
    ports:
      - "8000:8000"  # API port (if REST API is added)
    volumes:
      - ./src:/app/src
      - ./logs:/app/logs
      - ./src/generated:/app/src/generated
      - ./.faiss:/app/.faiss
      - ./memory:/app/memory
    environment:
      - MODEL_BACKEND=${MODEL_BACKEND:-ollama}
      - MODEL_NAME=${MODEL_NAME:-llama3.1:8b-instruct-q5_K_M}
      - OLLAMA_BASE_URL=http://ollama:11434
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8001
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PARALLEL_MODE=${PARALLEL_MODE:-true}
      - MAX_CONCURRENT_TASKS=${MAX_CONCURRENT_TASKS:-8}
    env_file:
      - .env
    depends_on:
      - chromadb
      - ollama
    networks:
      - orchestrator_network
    restart: unless-stopped
    command: ["python", "main.py", "${TASK:-Build a FastAPI service}"]

  # ChromaDB Vector Store
  chromadb:
    image: chromadb/chroma:latest
    container_name: chromadb
    ports:
      - "8001:8000"
    volumes:
      - chromadb_data:/chroma/chroma
    environment:
      - IS_PERSISTENT=TRUE
      - ANONYMIZED_TELEMETRY=${CHROMA_TELEMETRY:-FALSE}
    networks:
      - orchestrator_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Ollama LLM Service
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama_models:/root/.ollama
    environment:
      - OLLAMA_NUM_PARALLEL=${OLLAMA_NUM_PARALLEL:-4}
      - OLLAMA_MAX_LOADED_MODELS=${OLLAMA_MAX_LOADED_MODELS:-2}
    networks:
      - orchestrator_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 60s
      timeout: 10s
      retries: 3
    # For GPU support on Linux, uncomment:
    # deploy:
    #   resources:
    #     reservations:
    #       devices:
    #         - driver: nvidia
    #           count: all
    #           capabilities: [gpu]

  # Redis Cache (Optional - Tier 3)
  redis:
    image: redis:7-alpine
    container_name: redis_cache
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - orchestrator_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - tier3  # Only start with --profile tier3

volumes:
  chromadb_data:
    driver: local
  ollama_models:
    driver: local
  redis_data:
    driver: local
networks:
  orchestrator_network:
    driver: bridge
