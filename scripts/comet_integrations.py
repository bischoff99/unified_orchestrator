#!/usr/bin/env python3
"""
Comet Browser Assistant Integrations
Automates GitHub, Linear, Notion, and Slack workflows
"""

import subprocess
import json
from pathlib import Path
from datetime import datetime
import sys
import argparse

sys.path.insert(0, str(Path(__file__).parent.parent))


class CometWorkflow:
    """
    Orchestrator integrations via Comet Browser Assistant.
    
    Connects to:
    - GitHub (repos, issues, PRs)
    - Linear (task management)
    - Notion (documentation)
    - Slack (team notifications)
    """
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
    
    def full_automation(self, run_id: str):
        """
        Complete post-generation workflow:
        1. Create GitHub repo with generated code
        2. Create Linear ticket for review
        3. Document in Notion
        4. Notify team in Slack
        
        Args:
            run_id: Orchestrator run ID (e.g., job_abc123)
        """
        print(f"🚀 Running full automation for: {run_id}\n")
        
        # Load run manifest
        manifest = self._load_manifest(run_id)
        if not manifest:
            print(f"❌ Manifest not found for {run_id}")
            return False
        
        project_name = manifest.get("project", run_id)
        status = manifest.get("status", "unknown")
        
        print(f"📊 Project: {project_name}")
        print(f"📊 Status: {status}")
        print(f"📊 Duration: {manifest.get('duration_s', 0):.1f}s\n")
        
        # Execute automation steps
        results = {}
        
        # 1. GitHub
        print("=" * 60)
        print("📦 GITHUB: Creating repository...")
        print("=" * 60)
        results['github'] = self.create_github_repo(run_id, project_name)
        
        # 2. Linear
        print("\n" + "=" * 60)
        print("📊 LINEAR: Creating review ticket...")
        print("=" * 60)
        results['linear'] = self.create_linear_ticket(
            title=f"Review Generated Code: {project_name}",
            description=self._format_linear_description(manifest, results['github']),
            project="Engineering"
        )
        
        # 3. Notion
        print("\n" + "=" * 60)
        print("📚 NOTION: Documenting generation...")
        print("=" * 60)
        results['notion'] = self.create_notion_page(
            title=f"Generated: {project_name}",
            content=self._format_notion_content(manifest, results),
            database="Generated Projects"
        )
        
        # 4. Slack
        print("\n" + "=" * 60)
        print("💬 SLACK: Notifying team...")
        print("=" * 60)
        results['slack'] = self.notify_slack(
            channel="engineering",
            message=self._format_slack_message(project_name, run_id, results)
        )
        
        # Summary
        print("\n" + "=" * 60)
        print("✅ AUTOMATION COMPLETE")
        print("=" * 60)
        self._print_summary(results)
        
        return True
    
    def create_github_repo(self, run_id: str, project_name: str) -> dict:
        """
        Create GitHub repo from generated code.
        
        Returns:
            dict with 'success' and 'url' keys
        """
        run_dir = self.project_root / "runs" / run_id / "outputs"
        
        if not run_dir.exists():
            print(f"  ⚠️  Output directory not found: {run_dir}")
            return {'success': False, 'url': None}
        
        # Try Comet CLI
        try:
            cmd = [
                "comet", "github", "create-repo",
                "--name", f"generated-{project_name}",
                "--description", f"Generated by unified_orchestrator (run: {run_id})",
                "--private", "false",
                "--source", str(run_dir)
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                repo_url = result.stdout.strip()
                print(f"  ✅ Repository created: {repo_url}")
                return {'success': True, 'url': repo_url}
            else:
                print(f"  ❌ Comet CLI error: {result.stderr}")
        
        except FileNotFoundError:
            print("  ⚠️  Comet CLI not found")
        except subprocess.TimeoutExpired:
            print("  ⚠️  Command timed out")
        except Exception as e:
            print(f"  ❌ Error: {e}")
        
        # Fallback: Manual instructions
        print("\n  📝 MANUAL SETUP REQUIRED:")
        print(f"     1. Create repo: https://github.com/new")
        print(f"     2. Name: generated-{project_name}")
        print(f"     3. Initialize in: {run_dir}")
        print(f"     4. Commands:")
        print(f"        cd {run_dir}")
        print(f"        git init")
        print(f"        git add .")
        print(f"        git commit -m 'Initial commit from unified_orchestrator'")
        print(f"        git remote add origin git@github.com:YOUR_USERNAME/generated-{project_name}.git")
        print(f"        git push -u origin main")
        
        return {
            'success': False,
            'url': f"https://github.com/YOUR_USERNAME/generated-{project_name}",
            'manual': True
        }
    
    def create_linear_ticket(self, title: str, description: str, project: str) -> dict:
        """
        Create Linear ticket for code review.
        
        Returns:
            dict with 'success' and 'id' keys
        """
        try:
            cmd = [
                "comet", "linear", "create-issue",
                "--title", title,
                "--description", description,
                "--project", project,
                "--priority", "medium",
                "--label", "generated-code"
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                ticket_id = result.stdout.strip()
                print(f"  ✅ Ticket created: {ticket_id}")
                return {'success': True, 'id': ticket_id}
            else:
                print(f"  ❌ Comet CLI error: {result.stderr}")
        
        except FileNotFoundError:
            print("  ⚠️  Comet CLI not found")
        except Exception as e:
            print(f"  ❌ Error: {e}")
        
        # Fallback: Manual instructions
        print("\n  📝 MANUAL SETUP REQUIRED:")
        print(f"     1. Open Linear: https://linear.app")
        print(f"     2. Create issue with title: {title}")
        print(f"     3. Add description: {description}")
        print(f"     4. Set project: {project}")
        
        return {'success': False, 'id': 'LINEAR-XXX', 'manual': True}
    
    def create_notion_page(self, title: str, content: str, database: str) -> dict:
        """
        Create Notion documentation page.
        
        Returns:
            dict with 'success' and 'url' keys
        """
        try:
            cmd = [
                "comet", "notion", "create-page",
                "--title", title,
                "--content", content,
                "--database", database
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                page_url = result.stdout.strip()
                print(f"  ✅ Page created: {page_url}")
                return {'success': True, 'url': page_url}
            else:
                print(f"  ❌ Comet CLI error: {result.stderr}")
        
        except FileNotFoundError:
            print("  ⚠️  Comet CLI not found")
        except Exception as e:
            print(f"  ❌ Error: {e}")
        
        # Fallback: Manual instructions
        print("\n  📝 MANUAL SETUP REQUIRED:")
        print(f"     1. Open Notion: https://notion.so")
        print(f"     2. Create page: {title}")
        print(f"     3. Add to database: {database}")
        
        return {'success': False, 'url': 'https://notion.so/your-page', 'manual': True}
    
    def notify_slack(self, channel: str, message: str) -> dict:
        """
        Send Slack notification.
        
        Returns:
            dict with 'success' key
        """
        try:
            cmd = [
                "comet", "slack", "send-message",
                "--channel", channel,
                "--text", message
            ]
            
            result = subprocess.run(cmd, capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                print(f"  ✅ Notification sent to #{channel}")
                return {'success': True}
            else:
                print(f"  ❌ Comet CLI error: {result.stderr}")
        
        except FileNotFoundError:
            print("  ⚠️  Comet CLI not found")
        except Exception as e:
            print(f"  ❌ Error: {e}")
        
        # Fallback: Manual instructions
        print("\n  📝 MANUAL SETUP REQUIRED:")
        print(f"     1. Open Slack: https://slack.com")
        print(f"     2. Post to #{channel}")
        print(f"     3. Message: {message[:100]}...")
        
        return {'success': False, 'manual': True}
    
    def _load_manifest(self, run_id: str) -> dict:
        """Load run manifest.json"""
        manifest_path = self.project_root / "runs" / run_id / "manifest.json"
        if manifest_path.exists():
            return json.loads(manifest_path.read_text())
        return {}
    
    def _format_linear_description(self, manifest: dict, github_result: dict) -> str:
        """Format Linear ticket description"""
        return f"""
**Generated Code Ready for Review**

**Run ID:** {manifest.get('job_id', 'unknown')}
**Project:** {manifest.get('project', 'unknown')}
**Provider:** {manifest.get('provider', 'unknown')}
**Duration:** {manifest.get('duration_s', 0):.1f}s
**Status:** {manifest.get('status', 'unknown')}

**Repository:** {github_result.get('url', 'See manual setup')}

**Files Generated:** {len(manifest.get('files', []))}

**Review Checklist:**
- [ ] Code quality and style
- [ ] Security considerations
- [ ] Performance optimization
- [ ] Test coverage
- [ ] Documentation completeness

**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M')}
"""
    
    def _format_notion_content(self, manifest: dict, results: dict) -> str:
        """Format Notion page content"""
        return f"""
# Generated Project Summary

**Run ID:** {manifest.get('job_id', 'unknown')}
**Project:** {manifest.get('project', 'unknown')}
**Status:** {manifest.get('status', 'unknown')}
**Duration:** {manifest.get('duration_s', 0):.1f}s
**Provider:** {manifest.get('provider', 'unknown')}
**Generated At:** {manifest.get('started_at', 'unknown')}

## Links
- **GitHub:** {results['github'].get('url', 'N/A')}
- **Linear:** {results['linear'].get('id', 'N/A')}

## Generated Files
{len(manifest.get('files', []))} files generated

## Artifacts
{len(manifest.get('artifacts', []))} artifacts

## Next Steps
1. Review code in GitHub
2. Complete Linear ticket checklist
3. Run tests locally
4. Deploy to staging environment
5. Update documentation

---
*Generated by unified_orchestrator on {datetime.now().strftime('%Y-%m-%d at %H:%M')}*
"""
    
    def _format_slack_message(self, project_name: str, run_id: str, results: dict) -> str:
        """Format Slack notification message"""
        return f"""
🎉 *New Code Generated!*

*Project:* {project_name}
*Run ID:* {run_id}

*Links:*
• GitHub: {results['github'].get('url', 'See manual setup')}
• Linear: {results['linear'].get('id', 'LINEAR-XXX')}
• Notion: {results['notion'].get('url', 'See manual setup')}

*Status:* Ready for review! 🚀

_Generated by unified_orchestrator at {datetime.now().strftime('%H:%M')}_
"""
    
    def _print_summary(self, results: dict):
        """Print automation summary"""
        print(f"\n📊 Summary:")
        print(f"  GitHub:  {'✅' if results['github']['success'] else '⚠️  Manual setup needed'}")
        print(f"  Linear:  {'✅' if results['linear']['success'] else '⚠️  Manual setup needed'}")
        print(f"  Notion:  {'✅' if results['notion']['success'] else '⚠️  Manual setup needed'}")
        print(f"  Slack:   {'✅' if results['slack']['success'] else '⚠️  Manual setup needed'}")
        
        if results['github']['success']:
            print(f"\n🔗 Repository: {results['github']['url']}")
        if results['linear']['success']:
            print(f"🔗 Ticket: {results['linear']['id']}")
        if results['notion']['success']:
            print(f"🔗 Notion: {results['notion']['url']}")


def main():
    """CLI interface"""
    parser = argparse.ArgumentParser(
        description="Comet Browser Assistant integrations for unified_orchestrator",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # Run full automation for latest run
  python scripts/comet_integrations.py full-automation $(ls -t runs/ | head -1)
  
  # Run for specific job
  python scripts/comet_integrations.py full-automation job_abc123

Note: Requires Comet Browser Assistant with GitHub, Linear, Notion, and Slack connectors configured.
"""
    )
    
    parser.add_argument(
        "action",
        choices=["full-automation"],
        help="Automation action to perform"
    )
    parser.add_argument(
        "run_id",
        help="Orchestrator run ID (e.g., job_abc123)"
    )
    
    args = parser.parse_args()
    
    workflow = CometWorkflow()
    
    if args.action == "full-automation":
        success = workflow.full_automation(args.run_id)
        sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()

